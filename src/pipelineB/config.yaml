# Configuration file for Pipeline B: Monocular Depth Estimation + Classification

# Data settings
data:
  root: "data/CW2-Dataset/data"
  image_size: 480  # Input image size for the model
  num_workers: 4
  train_batch_size: 32  # Batch size for training
  eval_batch_size: 4    # Batch size for evaluation/testing
  train_val_split: 0.8  # 80% training, 20% validation

# Model settings
model:
  name: "resnet18"  # Base CNN architecture
  pretrained: false  # Use pretrained weights
  num_classes: 2    # Binary classification: Table / No Table
  depth_model_type: "DPT_Hybrid"  # MiDaS depth estimation model type
  freeze_depth_estimator: true  # Whether to freeze the depth estimator during training

# Training settings
training:
  epochs: 100
  lr: 1e-3
  weight_decay: 1e-3
  early_stopping: 100  # Number of epochs with no improvement after which training will be stopped

  # --- Scheduler Settings ---
  scheduler_type: "cosine" # Options: "cosine", "step"

  # StepLR settings (used if scheduler_type is "step")
  step_lr_decay_step: 5
  step_lr_gamma: 0.6

  # CosineAnnealingLR settings (used if scheduler_type is "cosine")
  # T_max: Maximum number of iterations (usually set to total epochs for one cycle)
  cosine_T_max: 100 # Defaulting to epochs, adjust if needed
  # eta_min: Minimum learning rate
  cosine_eta_min: 1e-5 # A small fraction of the initial LR

  # --- Depth Estimation Loss Weights ---
  # (Only relevant if freeze_depth_estimator is false)
  depth_loss_weight: 1.0  # Set to 0.0 to disable depth loss when frozen
  si_weight: 1.0  # Scale-invariant MSE loss weight
  edge_weight: 0.1  # Edge-aware gradient loss weight

# Logging settings
logging:
  log_dir: "results/pipelineB"
  experiment_name: "depth_classification"
  use_tensorboard: true
  log_interval: 10  # Log every 10 batches
  save_checkpoint: true
  checkpoint_dir: "weights/pipelineB"

# Visualization settings
visualization:
  num_samples: 20  # Number of samples to visualize in evaluation
  train_depth_vis: false  # Whether to visualize depth maps during training
  test_depth_vis: true    # Whether to visualize depth maps during evaluation